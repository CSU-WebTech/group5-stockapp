@page "/stockprices"
@using StockApp.Models;
@using StockApp.Clients;
@inject StockClient StockClient;
@using System.IO;
@using System.Text.Json;
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Net.Http

<PageTitle>Stock Pricing</PageTitle>

<div class="container px-4 px-lg-5" style="text-align:center;">
    <br>
    <h2>Stock Price</h2>
    <p style="color:darkblue;">Please enter a valid stock acronym:</p>
    <input placeholder="AACG" @bind-value="@enteredStock" />
    <button class="btn btn-primary" @onclick="AddStock">Lookup</button>
    <br>
    <br>
    @if (stockResponse != null)
    {
        <h3>Stock Information (Last 1 Month)</h3>
        <div class="table-responsive">
            <canvas id="stockChart" width="500" height="300"></canvas>
        </div>
        <br><br>
    }
</div>

@code {
    private StockResponse? stockResponse = null;
    private string? enteredStock;

    protected override async Task OnInitializedAsync()
    {
        stockResponse = await StockClient.GetStock(null);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && stockResponse != null)
        {
            await RenderChart();
        }
    }

    protected async Task AddStock()
    {
        if (enteredStock != null)
        {
            stockResponse = await StockClient.GetStock(enteredStock);
            await RenderChart();
        }
    }

    private async Task RenderChart()
    {
        if (stockResponse != null)
        {
            var labels = stockResponse.theValues.Select(v => v.theDateTime.ToString()).Reverse().ToArray();
            var data = stockResponse.theValues.Select(v => v.theOpen).Reverse().ToArray();

            await JSRuntime.InvokeVoidAsync("createChartInStockPrices", "stockChart", labels, data);
        }
    }

}
