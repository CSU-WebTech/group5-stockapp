@page "/stocksearch"
@using StockApp.Models;
@using StockApp.Clients;
@inject StockClient StockClient;
@using System.IO;
@using System.Text.Json;
@inject ILocalStorageService LocalStorage

<PageTitle>Stock Search</PageTitle>

<div class="container px-4 px-lg-5">
    <div class="row">
        <div class="col-md-12">
            <div style="text-align:center">
                <br>
                <h2>Lookup Stock</h2>
                <p style="color:darkblue;">Please enter a valid stock acronym:</p>
                <input placeholder="AACG" @bind-value="@enteredStock" style="height:38px"/>
                <button class="btn btn-primary" @onclick="AddStock">Lookup</button>
                </div>
            <br>

            @if (stockResponse != null)
            {
                <h3 style="text-align:center">Stock Information</h3>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>Date Time</th>
                                <th>Open</th>
                                <th>High</th>
                                <th>Low</th>
                                <th>Close</th>
                                <th>Typical Price</th>
                                <th>Gain/Loss</th>
                                <th>Volume</th>
                                <th>Currency</th>
                                <th>Exchange Timezone</th>
                                <th>Exchange</th>
                                <th>Mic Code</th>
                                <th>Type</th>
                                <th>Symbol</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < stockResponse.theValues.Length-1; i++)
                            {
                                var value = stockResponse.theValues[i];
                                var nextvalue = stockResponse.theValues[i+1];
                                <tr>
                                    <td>@value.theDateTime</td>
                                    <td>@value.theOpen</td>
                                    <td>@value.theHigh</td>
                                    <td>@value.theLow</td>
                                    <td>@value.theClose</td>
                                    <td>@(float.Parse(value.theHigh)/3+float.Parse(value.theLow)/3+float.Parse(value.theClose)/3)</td>
                                    <td>@(float.Parse(nextvalue.theHigh)-float.Parse(value.theHigh))</td>
                                    <td>@value.theVolume</td>
                                    <td>@stockResponse.theMetaData.theCurrency</td>
                                    <td>@stockResponse.theMetaData.theExchangeTimezone</td>
                                    <td>@stockResponse.theMetaData.theExchange</td>
                                    <td>@stockResponse.theMetaData.theMicCode</td>
                                    <td>@stockResponse.theMetaData.theType</td>
                                    <td>@stockResponse.theMetaData.theSymbol</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else {
                <br>
                <br>
                <h3 style="text-align:center; color:red;">No Results</h3>
            }
        </div>
    </div>
</div>

@code {

    private StockResponse? stockResponse = null;
    protected override async Task OnInitializedAsync(){
        //stockResponse = await StockClient.GetStock(null);

        //BELOW IS USED TO CLEAR CACHED DATA
        //await LocalStorage.ClearAsync();
    }

    private string? enteredStock;
    private List<string> searchHistory = new List<string>(); // Added this line to maintain a list of search queries

    protected async Task AddStock(){

        if(enteredStock != null){  

            stockResponse = await StockClient.GetStock(enteredStock);
            await SaveData();
        }
    }

    private async Task SaveData()
    {
        searchHistory.Add(enteredStock); // Added this line to add entered stock to the search history
        await LocalStorage.SetItemAsync("searchHistory", searchHistory.ToArray()); // Updated this line to save the search history array
    }
}
