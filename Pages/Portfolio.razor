@page "/portfolio"
@using StockApp.Models;
@using StockApp.Clients;
@inject StockClient StockClient;

<PageTitle>Portfolio</PageTitle>

<div class="container px-4 px-lg-5">
    <div class="row">
        <div class="col-md-6">
            <h2>Portfolio Search</h2>
            <br>
            <p>Select a search option:</p>
                <select @bind="selectedOption" class="form-control">
                    <option value="stock">Stock Acronym</option>
                    <option value="code">Stock Code</option>
                    <option value="currency">Currency</option>
                    <option value="exchange">Exchange</option>
                </select>
            <br>
            <p>Please enter a valid <b>Entry</b>:</p>

            <div class="form-group row">
                <div class="col-md-9">
                    <input placeholder="@searchPlaceholder" @bind-value="@searchValue" class="form-control"/>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-primary" @onclick="PerformLookup">Lookup</button>
                </div>
            </div>
            <br>
        </div>
    </div>
    @if (stockResponseWatchList != null && stockResponseWatchList.theData != null)
    {
        <div class="row">
            <div class="col-md-12">
                <h3>Search Results</h3>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>Symbol</th>
                                <th>Name</th>
                                <th>Currency</th>
                                <th>Exchange</th>
                                <th>Mic Code</th>
                                <th>Country</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var value in stockResponseWatchList.theData)
                            {
                                <tr>
                                    <td>@value.theSymbol</td>
                                    <td>@value.theName</td>
                                    <td>@value.theCurrency</td>
                                    <td>@value.theExchange</td>
                                    <td>@value.theMic_Code</td>
                                    <td>@value.theCountry</td>
                                    <td>@value.theType</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private StockResponseWatchList? stockResponseWatchList = null;

    protected override async Task OnInitializedAsync()
    {
        stockResponseWatchList = await StockClient.GetAllStocks(null);
    }

    private string selectedOption = "stock";
    private string searchLabel = "stock acronym";
    private string searchPlaceholder = "";
    private string? searchValue;

    private void UpdateOption(ChangeEventArgs e)
    {
        selectedOption = e.Value.ToString();
        switch (selectedOption)
        {
            case "stock":
                searchLabel = "stock acronym";
                searchPlaceholder = "";
                break;
            case "code":
                searchLabel = "stock code";
                searchPlaceholder = "XNMS";
                break;
            case "currency":
                searchLabel = "currency";
                searchPlaceholder = "USD";
                break;
            case "exchange":
                searchLabel = "exchange";
                searchPlaceholder = "NASDAQ";
                break;
        }
    }

    protected async Task PerformLookup()
    {
        if (searchValue != null)
        {
            switch (selectedOption)
            {
                case "stock":
                    stockResponseWatchList = await StockClient.GetAllStocks(searchValue);
                    break;
                case "code":
                    stockResponseWatchList = await StockClient.GetStockCode(searchValue);
                    break;
                case "currency":
                    stockResponseWatchList = await StockClient.GetCurrency(searchValue);
                    break;
                case "exchange":
                    stockResponseWatchList = await StockClient.GetExchange(searchValue);
                    break;
            }
        }
    }
}
